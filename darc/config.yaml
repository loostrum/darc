# DARC Master config
darc_master:
    log_file: "{home}/darc/log/darc_master.{hostname}.log"
    parset_dir: "{home}/darc/parsets"
    port: 51000  # NOTE: also hardcoded in darc_start_all_services
    socket_timeout: 30  # for creating socket
    setup_time: 5  # start_observation is sent this long before the actual start time
    stop_timeout: 5  # for stopping services
    control_timeout: 5  # for service interaction, e.g. enabling/disabling lofar triggering
    mode:  'mixed'  # real-time, offline, or mixed
    services_master_rt: ["status_website", "voevent_generator", "lofar_trigger", "processor"]
    services_worker_rt: ["amber_listener", "amber_clustering", "dada_trigger", "processor"]
    services_master_off: ["offline_processing", "status_website"]
    services_worker_off: ["offline_processing"]
    services_master_mix: ["offline_processing", "status_website", "voevent_generator", "lofar_trigger", "processor"]
    services_worker_mix: ["offline_processing", "amber_listener", "amber_clustering", "dada_trigger", "processor"]
    master_commands: ["start_observation", "stop_observation", "abort_observation", "stop_master", "edit", "reload",
                      "lofar_status", "lofar_enable", "lofar_disable", "voevent_status", "voevent_enable",
                      "voevent_disable", "get_attr"]
    service_commands: ["status", "start", "stop", "restart", "get_attr"]
    editor: "vim"

# Status website
status_website:
    log_file: "{home}/darc/log/status_website.{hostname}.log"
    web_dir: "{home}/public_html/darc/status"
    interval: 10
    timeout: 10
    colour_good: "green"
    colour_bad: "red"
    colour_unknown: "grey"
    service_to_name:
        voevent_generator: "VOEvent generator"
        status_website: "Status website"
        amber_listener: "AMBER listener"
        amber_clustering: "AMBER clustering"
        offline_processing: "Offline processing"
        dada_trigger: "IQUV triggering"
        lofar_trigger: "LOFAR triggering"
        processor: "Processor"

# AMBER trigger listener
amber_listener:
    log_file: "{home}/darc/log/amber_listener.{hostname}.log"
    interval: .2
    start_timeout: 60

# Clustering of AMBER triggers
amber_clustering:
    log_file: "{home}/darc/log/amber_clustering.{hostname}.log"
    source_file: "{home}/darc/source_list.yaml"
    interval: 1.0  # how often to process candidates (seconds)
    clustering_window: 1.0  # time window for candidates that are clustered together (seconds)
    # Global thresholds and limits for known sources
    dm_range: 10  # for known sources, trigger if within this many DM units
    dm_min_global: 5  # never trigger below this DM
    snr_min_global: 10  # never trigger below this S/N
    sb_filter: True  # whether or not to filter triggers on SB periodicity
    sb_filter_period_min: 10
    sb_filter_period_max: 15  # excluding max value itself
    # thresholds for IQUV triggering on new sources
    thresh_iquv:
      dm_frac_min: 1.2  # fraction of max MW contribution
      width_max: 100  # corresponds to ~8ms
      snr_min: 10
      interval: 60  # seconds
    # thresholds for LOFAR triggering
    # assumed to be equally or more strict than IQUV thresholds for each parameter
    # for known sources, the DM and max cands per cluster thresholds are not applied
    thresh_lofar:
      max_cands_per_cluster: 100  # maximum number of raw candidates going into one cluster
      dm_frac_min: 2.0  # fraction of max MW contribution.
      width_max: 80  # ensure skipping triggers with downsampling=100, which are often RFI
      snr_min: 20  # effectively disable by setting high S/N threshold
    # known sources for which to override LOFAR thresholds
    lofar_trigger_sources: []
    # LOFAR triggering thresholds for override sources
    thresh_lofar_override:
      snr_min: 10
      width_max: 80
      cb: 0  # remove or comment out this line to trigger on any CB
      trigger_on_new_sources: False  # whether or not to also trigger on new sources

# VOEvent generator
voevent_generator:
    log_file: "{home}/darc/log/voevent_generator.{hostname}.log"
    voevent_dir: "{home}/darc/voevents"
    test: True  # send real observation or test events?
    interval: 1.0  # how long to keep gathering triggers after one arrives
    send_events: False  # the voevent_enable and voevent_disable commands change send_events to True or False
    server_port: 5200   # Port the VOEvent service listens to
    server_auth: "pass"  # choose a password for the VOEvent service and put it here (str)
    broker_host: "localhost"  # Hostname of the external VOEvent broker (str)
    broker_port: 9000  # the port the external VOEvent broker listens to (int)

# LOFAR triggers
lofar_trigger:
    log_file: "{home}/darc/log/lofar_trigger.{hostname}.log"
    test: True  # send real observation or test events?
    interval: 1.0  # how long to keep gathering triggers after one arrives
    send_events: False  # the lofar_enable and lofar_disable commands change send_events to True or False
    server_port: 5201   # Port the LOFAR trigger service listens to
    server_auth: "pass"  # choose a password for the LOFAR trigger service and put it here (str)
    lofar_host: "localhost"  # LOFAR server that listens for triggers
    lofar_port: 31662  # Port the LOFAR server listens to
    lofar_freq: 200  # MHz, reference frequency for TBBs
    lofar_tbb_buffer_size: 5.  # seconds
    waterfall_sb: "{home}/ARTS-obs/external/arts-analysis/waterfall_sb.py"
    email_settings:
        to: ['test@localhost']

# DADA triggers
dada_trigger:
    log_file: "{home}/darc/log/dada_trigger.{hostname}.log"
    port_i: 30000  # dada_dbevent port used for Stokes I triggers
    port_iquv: 30001  # dada_dbevent port used for Stokes IQUV triggers
    min_window_size: 2.048  # minimum trigger duration (s)
    delay_end: 2.048  # how much extra to store in addition to DM delay (s)
    # settings for automated IQUV dumps during polcal observations:
    polcal_dump_size: 30  # seconds
    polcal_interval: 60  # seconds
    polcal_max_dumps: 4  # maximum number of dumps during the obs

# SB generator
sb_generator:
    table_folder: "{home}/.controller/synthesized_beam_tables/"
    table:
        sc3: "sbtable-9tabs-114sbs-f1370.txt"
        sc4: "sbtable-sc4-12tabs-71sbs.txt"
    numtab:
        sc3: 9
        sc4: 12
    numsb:
        sc3: 114
        sc4: 71

# Trigger processor (master):
processor_master:
    log_file: "{home}/darc/log/processor.{hostname}.log"
    scavenger_interval: 60  # interval for thread scavenger to remove dead threads (seconds)
    check_interval: 60  # How often to check whether workers are done with processing (s)
    max_wait_time: 600  # After how much processing time we should check if a node is still online
    ntrig_email_max: 100  # Maximum number of triggers to show in email
    webdir: "triggers_realtime"  # subdir of public_html/darc to use for trigger website
    node_timeout: 10  # when contacting nodes regarding processing status (s)
    email_settings:
        to: "test@localhost"


# Trigger processor (worker)
processor:
    log_file: "{home}/darc/log/processor.{hostname}.log"
    scavenger_interval: 60  # interval for thread scavenger to remove dead threads (seconds)
    interval: 1.1  # how often to process candidates (seconds)
    num_extractor: 2  # how many data extractors to run
    output_subdir: "triggers_realtime"  # output dir for triggers on each node
    result_dir: "{home}/darc/results"  # central output dir for observation results
    stop_delay: 2  # keep receiving AMBER triggers for this long before stopping observation (seconds)
    # clustering settings
    clustering:
        output_file: "grouped_pulses.singlepulse"  # output file for clustered triggers
        dm_min: 20
        dm_max: -1  # -1 = infinite
        snr_min_clustering: 8  # during clustering
        snr_min: 10  # post-clustering (i.e. also post SB periodicity filter)
        sb_filter: False
        sb_filter_period_min: 10
        sb_filter_period_max: 15
        clustering_window: 0.5
        width_max: -1  # max downsampling factor, -1 = infinite
    # data extractor settings:
    extractor:
        dm_halfrange: 10
        ndm: 64  # number of DM samples. Must be multiple of classifier ndm
        ntime: 64  # number of time samples in output. Must be multiple of classifier ntime
        nfreq: 64  # number of frequency channels in output. Must be multiple of classifier nfreq
        delay: 5   # how long to wait until attempting to read filterbank (s)
        rfi_mask: "{home}/.controller/amber_conf/zapped_channels_FREQ.conf"  # path to rfi mask. FREQ is replace by central frequency
        rfi_apply_mask: True
        rfi_clean_type: "perchannel"  # RFI cleaning type, options: time, freqency, both, perchannel, None
        rfi_threshold_time: 3.25
        rfi_n_iter_time: 3
        rfi_threshold_freq: 2.75
        rfi_n_iter_freq: 3
        rfi_bin_size: 32  # bin size for bandpass removal, should be a factor of the number of channels in the filterbank data
        snr_min_local: 5  # skip any triggers with a local S/N below this value
    # ML classifier settings
    classifier:
        gpu: 0
        thresh_freqtime: 0.5
        thresh_dmtime: 0.0
        ndm: 64  # fixed by model shape
        ntime: 64  # fixed by model shape
        nfreq: 32  # fixed by model shape
        model_dir: "{home}/keras_models"
        model_freqtime: "20190501freq_time.hdf5"
        model_dmtime: "heimdall_dm_time.hdf5"
    # Visualization settings:
    visualizer:
        nplot_per_side: 5
        figsize: 15
        cmap_freqtime: "viridis"  # any matplotlib colour map
        cmap_dmtime: "viridis"  # any matplotlib colour map
        colour_1dtime: "black"  # any matplotlib colour
        plot_types: ['freq_time', 'dm_time', '1d_time']  # order of plots in PDF output. Options: freq_time, dm_time, 1d_time

# Offline processing
offline_processing:
    log_file: "{home}/darc/log/offline_processing.{hostname}.log"
    full_processing_enabled: True
    delay: 10
    process_sb: True
    numthread: 2
    result_dir: "{home}/observations/results/"
    interval: 10
    timeout: 10
    pthresh_freqtime: 0.5
    pthresh_dmtime: 0.05
    cmap: 'viridis'
    ntime_plot: 64
    nfreq_plot: 64
    ndm: 64
    snrmin_processing: 8
    snrmin_processing_local: 5
    dmmin: 20
    dmmax: 100000
    dmgal_frac: 0.8
    clean_type: "perchannel"
    max_proc_time: 18000
    ml_gpus: 0
    test_pulsars: ["B0329+54", "B1933+16", "B0531+21", "B0950+08"]  # these will be folded with PRESTO
    calibrators: ["CasA", "TauA", "3C48", "3C196", "3C286", "3C138", "3C147"]  # from calibration_tools.py
    key_ntriggers_skipped: "ntriggers_skipped"
    keys_data: ["data_freq_time", "data_dm_time", "params"]
    model_dir: "{home}/keras_models"
    model_1dtime: "heimdall_b0329_mix_147411d_time.hdf5"
    model_dmtime: "heimdall_dm_time.hdf5"
    model_freqtime: "20190501freq_time.hdf5"
    calibration_dir: "{home}/darc/calibration"
    emailer: "{home}/ARTS-obs/emailer.py"
    triggering: "{home}/ARTS-obs/external/arts-analysis/triggers.py"
    classifier: "{home}/ARTS-obs/external/single_pulse_ml/single_pulse_ml/classify.py"
    calibration_tools: "{home}/ARTS-obs/external/arts-analysis/calibration_tools.py"
    fetch_after_obs: "/home/maan/scripts/fetch_after_obs.py"
